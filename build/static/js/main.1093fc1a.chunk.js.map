{"version":3,"sources":["util.js","Components/Map.js","Components/InfoBox.js","Components/Table.js","Components/LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","className","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","InfoBox","title","total","active","isRed","props","Card","onClick","CardContent","Typography","Table","options","legend","display","elements","point","mainAspectRatio","tooltips","mode","intersect","callbacks","lable","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchedData","length","datasets","borderColor","backgroundColor","App","tableData","setTableData","setCountries","setCountry","setCountryInfo","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountries","changeCountry","event","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1093fc1a.chunk.js","sourcesContent":["import React from 'react';\r\nimport numeral from \"numeral\"\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortData = [...data];\r\n    sortData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortData;\r\n}\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react'\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\"\r\nimport {showDataOnMap} from \"../util\"\r\nimport \"./Map.css\"; \r\nfunction Map({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}> \r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries,casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\r\nimport './infoBox.css'\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react'\r\nimport './Table.css' \r\nimport numeral from \"numeral\";\r\n\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n      <div className=\"table\">\r\n        {countries.map(({ country, cases }) => (\r\n          <tr>\r\n            <td>{country}</td>\r\n            <td>\r\n              <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n            </td>\r\n          </tr>\r\n        ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect,useState} from 'react'\r\nimport { Line } from 'react-chartjs-2'\r\nimport numeral from \"numeral\"\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  mainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      lable: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n      ],\r\n      yAxes: [\r\n          {\r\n              gridLines: {\r\n                  display:false,\r\n              },\r\n              ticks: {\r\n                  callback: function (value, index, values) {\r\n                      return numeral(value).format(\"0a\");\r\n                  }\r\n              }\r\n          }\r\n      ]\r\n  },\r\n};\r\n\r\n const buildChartData = (data, casesType = \"cases\") => {\r\n   const chartData = [];\r\n   let lastDataPoint;\r\n   for (let date in data.cases) {\r\n     if (lastDataPoint) {\r\n       const newDataPoint = {\r\n         x: date,\r\n         y: data[casesType][date] - lastDataPoint,\r\n       };\r\n       chartData.push(newDataPoint);\r\n     }\r\n     lastDataPoint = data[casesType][date];\r\n   }\r\n   return chartData;\r\n };\r\nfunction LineGraph({ casesType=\"cases\",...props }) {\r\n  const [data, setData] = useState({});\r\n  useEffect(() => {\r\n    const fetchedData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          let chartData = buildChartData(data,casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchedData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                borderColor: \"#cc1031\",\r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph\r\n","import React,{useState,useEffect } from 'react';\nimport { Card,CardContent,MenuItem, FormControl, Select } from '@material-ui/core'\nimport Map from './Components/Map'\nimport InfoBox from \"./Components/InfoBox\"\nimport Table from \"./Components/Table\"\nimport LineGraph from './Components/LineGraph'\nimport 'leaflet/dist/leaflet.css'\nimport './App.css';\nimport { sortData, prettyPrintStat } from \"./util\";\n\nfunction App() {\n  const [tableData, setTableData] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldWide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4790 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const API = 'https://disease.sh/v3/covid-19/countries';\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(data => setCountryInfo(data));\n  },[])\n  useEffect(() => {\n    const getCountries = async () => {\n      await fetch(API).then((response) => response.json()).then(data => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n        const sortedData = sortData(data);\n        setCountries(countries);\n        setTableData(sortedData);\n        setMapCountries(data);\n      });\n    }\n    getCountries();\n  }, []);\n  const changeCountry = async (event) => {\n    const country = event.target.value;\n    const url =\n      country === \"worldWide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${country}`;\n    await fetch(url).then((response) => response.json()).then((data) => {\n      setCountry(country);\n      setCountryInfo(data);\n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    })\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" value={country} onChange={changeCountry}>\n              <MenuItem value=\"worldWide\">worldWide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live cases by the Country </h3>\n            <Table countries={tableData} />\n               <h3 className=\"app__graph__title\">Worldwide new {casesType}</h3>\n               <LineGraph className=\"app__graph\" casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}